{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assignNestedKeys = void 0;\nexports.default = cssVarsParser;\nexports.walkObjectDeep = void 0;\n/**\n * This function create an object from keys, value and then assign to target\n *\n * @param {Object} obj : the target object to be assigned\n * @param {string[]} keys\n * @param {string | number} value\n *\n * @example\n * const source = {}\n * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }\n *\n * @example\n * const source = { palette: { primary: 'var(--palette-primary)' } }\n * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }\n */\n\nconst assignNestedKeys = (obj, keys, value) => {\n  let temp = obj;\n  keys.forEach((k, index) => {\n    if (index === keys.length - 1) {\n      if (temp && typeof temp === 'object') {\n        temp[k] = value;\n      }\n    } else if (temp && typeof temp === 'object') {\n      if (!temp[k]) {\n        temp[k] = {};\n      }\n\n      temp = temp[k];\n    }\n  });\n};\n/**\n *\n * @param {Object} obj : source object\n * @param {Function} callback : a function that will be called when\n *                   - the deepest key in source object is reached\n *                   - the value of the deepest key is NOT `undefined` | `null`\n *\n * @example\n * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)\n * // ['palette', 'primary', 'main'] '#000000'\n */\n\n\nexports.assignNestedKeys = assignNestedKeys;\n\nconst walkObjectDeep = (obj, callback, shouldSkipPaths) => {\n  function recurse(object) {\n    let parentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    Object.entries(object).forEach(_ref => {\n      let [key, value] = _ref;\n\n      if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {\n        if (value !== undefined && value !== null) {\n          if (typeof value === 'object' && Object.keys(value).length > 0) {\n            recurse(value, [...parentKeys, key]);\n          } else {\n            callback([...parentKeys, key], value, object);\n          }\n        }\n      }\n    });\n  }\n\n  recurse(obj);\n};\n\nexports.walkObjectDeep = walkObjectDeep;\n\nconst getCssValue = (keys, value) => {\n  if (typeof value === 'number') {\n    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {\n      // CSS property that are unitless\n      return value;\n    }\n\n    return `${value}px`;\n  }\n\n  return value;\n};\n/**\n * a function that parse theme and return { css, vars }\n *\n * @param {Object} theme\n * @param {{\n *  prefix?: string,\n *  basePrefix?: string,\n *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean\n * }} options.\n *  `basePrefix`: defined by design system.\n *  `prefix`: defined by application\n *\n *   This function also mutate the string value of theme input by replacing `basePrefix` (if existed) with `prefix`\n *\n * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme)\n *\n * @example\n * const { css, vars } = parser({\n *   fontSize: 12,\n *   lineHeight: 1.2,\n *   palette: { primary: { 500: '#000000' } }\n * })\n *\n * console.log(css) // { '--fontSize': '12px', '--lineHeight': 1.2, '--palette-primary-500': '#000000' }\n * console.log(vars) // { fontSize: '--fontSize', lineHeight: '--lineHeight', palette: { primary: { 500: 'var(--palette-primary-500)' } } }\n */\n\n\nfunction cssVarsParser(theme, options) {\n  const {\n    prefix,\n    basePrefix = '',\n    shouldSkipGeneratingVar\n  } = options || {};\n  const css = {};\n  const vars = {};\n  walkObjectDeep(theme, (keys, val, scope) => {\n    if (typeof val === 'string' || typeof val === 'number') {\n      let value = val;\n\n      if (typeof value === 'string' && value.startsWith('var')) {\n        // replace the value of the `scope` object with the prefix or remove basePrefix from the value\n        if (!basePrefix && prefix) {\n          value = value.replace(/var\\(--/g, `var(--${prefix}-`);\n        } else {\n          value = prefix ? value.replace(new RegExp(basePrefix, 'g'), prefix) : value.replace(new RegExp(`${basePrefix}-`, 'g'), '');\n        } // scope is the deepest object in the tree, keys is the theme path keys\n\n\n        scope[keys.slice(-1)[0]] = value;\n      }\n\n      if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys, value)) {\n        // only create css & var if `shouldSkipGeneratingVar` return false\n        const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;\n        Object.assign(css, {\n          [cssVar]: getCssValue(keys, value)\n        });\n        assignNestedKeys(vars, keys, `var(${cssVar})`);\n      }\n    }\n  }, keys => keys[0] === 'vars' // skip 'vars/*' paths\n  );\n  return {\n    css,\n    vars\n  };\n}","map":{"version":3,"sources":["D:/AUT/4thYear/COMP703_RDProject/Github/SourceCode/tradingvision/node_modules/@mui/system/cssVars/cssVarsParser.js"],"names":["Object","defineProperty","exports","value","assignNestedKeys","default","cssVarsParser","walkObjectDeep","obj","keys","temp","forEach","k","index","length","callback","shouldSkipPaths","recurse","object","parentKeys","entries","key","undefined","getCssValue","some","prop","includes","theme","options","prefix","basePrefix","shouldSkipGeneratingVar","css","vars","val","scope","startsWith","replace","RegExp","slice","cssVar","join","assign"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assignNestedKeys = void 0;\nexports.default = cssVarsParser;\nexports.walkObjectDeep = void 0;\n\n/**\n * This function create an object from keys, value and then assign to target\n *\n * @param {Object} obj : the target object to be assigned\n * @param {string[]} keys\n * @param {string | number} value\n *\n * @example\n * const source = {}\n * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }\n *\n * @example\n * const source = { palette: { primary: 'var(--palette-primary)' } }\n * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }\n */\nconst assignNestedKeys = (obj, keys, value) => {\n  let temp = obj;\n  keys.forEach((k, index) => {\n    if (index === keys.length - 1) {\n      if (temp && typeof temp === 'object') {\n        temp[k] = value;\n      }\n    } else if (temp && typeof temp === 'object') {\n      if (!temp[k]) {\n        temp[k] = {};\n      }\n\n      temp = temp[k];\n    }\n  });\n};\n/**\n *\n * @param {Object} obj : source object\n * @param {Function} callback : a function that will be called when\n *                   - the deepest key in source object is reached\n *                   - the value of the deepest key is NOT `undefined` | `null`\n *\n * @example\n * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)\n * // ['palette', 'primary', 'main'] '#000000'\n */\n\n\nexports.assignNestedKeys = assignNestedKeys;\n\nconst walkObjectDeep = (obj, callback, shouldSkipPaths) => {\n  function recurse(object, parentKeys = []) {\n    Object.entries(object).forEach(([key, value]) => {\n      if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {\n        if (value !== undefined && value !== null) {\n          if (typeof value === 'object' && Object.keys(value).length > 0) {\n            recurse(value, [...parentKeys, key]);\n          } else {\n            callback([...parentKeys, key], value, object);\n          }\n        }\n      }\n    });\n  }\n\n  recurse(obj);\n};\n\nexports.walkObjectDeep = walkObjectDeep;\n\nconst getCssValue = (keys, value) => {\n  if (typeof value === 'number') {\n    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {\n      // CSS property that are unitless\n      return value;\n    }\n\n    return `${value}px`;\n  }\n\n  return value;\n};\n/**\n * a function that parse theme and return { css, vars }\n *\n * @param {Object} theme\n * @param {{\n *  prefix?: string,\n *  basePrefix?: string,\n *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean\n * }} options.\n *  `basePrefix`: defined by design system.\n *  `prefix`: defined by application\n *\n *   This function also mutate the string value of theme input by replacing `basePrefix` (if existed) with `prefix`\n *\n * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme)\n *\n * @example\n * const { css, vars } = parser({\n *   fontSize: 12,\n *   lineHeight: 1.2,\n *   palette: { primary: { 500: '#000000' } }\n * })\n *\n * console.log(css) // { '--fontSize': '12px', '--lineHeight': 1.2, '--palette-primary-500': '#000000' }\n * console.log(vars) // { fontSize: '--fontSize', lineHeight: '--lineHeight', palette: { primary: { 500: 'var(--palette-primary-500)' } } }\n */\n\n\nfunction cssVarsParser(theme, options) {\n  const {\n    prefix,\n    basePrefix = '',\n    shouldSkipGeneratingVar\n  } = options || {};\n  const css = {};\n  const vars = {};\n  walkObjectDeep(theme, (keys, val, scope) => {\n    if (typeof val === 'string' || typeof val === 'number') {\n      let value = val;\n\n      if (typeof value === 'string' && value.startsWith('var')) {\n        // replace the value of the `scope` object with the prefix or remove basePrefix from the value\n        if (!basePrefix && prefix) {\n          value = value.replace(/var\\(--/g, `var(--${prefix}-`);\n        } else {\n          value = prefix ? value.replace(new RegExp(basePrefix, 'g'), prefix) : value.replace(new RegExp(`${basePrefix}-`, 'g'), '');\n        } // scope is the deepest object in the tree, keys is the theme path keys\n\n\n        scope[keys.slice(-1)[0]] = value;\n      }\n\n      if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys, value)) {\n        // only create css & var if `shouldSkipGeneratingVar` return false\n        const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;\n        Object.assign(css, {\n          [cssVar]: getCssValue(keys, value)\n        });\n        assignNestedKeys(vars, keys, `var(${cssVar})`);\n      }\n    }\n  }, keys => keys[0] === 'vars' // skip 'vars/*' paths\n  );\n  return {\n    css,\n    vars\n  };\n}"]},"metadata":{},"sourceType":"script"}